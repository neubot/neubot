.\" Man page generated from reStructuredText.
.
.TH NEUBOT 1 "2013-04-23" "Neubot 0.5.0.0" "Neubot manual"
.SH NAME
neubot \- The network neutrality bot
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" 
.
.\" Copyright (c) 2010-2013
.
.\" Nexa Center for Internet & Society, Politecnico di Torino (DAUIN)
.
.\" and Simone Basso <bassosimone@gmail.com>
.
.\" 
.
.\" This file is part of Neubot <http://www.neubot.org/>.
.
.\" 
.
.\" Neubot is free software: you can redistribute it and/or modify
.
.\" it under the terms of the GNU General Public License as published by
.
.\" the Free Software Foundation, either version 3 of the License, or
.
.\" (at your option) any later version.
.
.\" 
.
.\" Neubot is distributed in the hope that it will be useful,
.
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.
.\" GNU General Public License for more details.
.
.\" 
.
.\" You should have received a copy of the GNU General Public License
.
.\" along with Neubot.  If not, see <http://www.gnu.org/licenses/>.
.
.\" 
.
.SH SYNOPSIS
.nf
\fBneubot\fP \fB\-\-help\fP
\fBneubot\fP \fB\-V\fP
\fBneubot\fP \fIsubcommand\fP ...
.fi
.sp
.SH DESCRIPTION
.sp
\fI\%Neubot\fP is a free\-software Internet bot that gathers network performance
data useful to investigate network neutrality. Neubot runs in the
background and periodically performs active network tests with test
servers provided by \fI\%Measurement Lab\fP (a distributed server platform
that hosts open network measurement tools). Implemented tests are
described in the \fI\%IMPLEMENTED TESTS\fP section.
.sp
Neubot does not perform any network test until you grant it the
permission to collect and publish your IP address for research
purposes. Neubot behaves like this because it is developed in the
European Union; therefore, it must comply with European privacy laws
(which consider IP addresses personal data). See the \fI\%PRIVACY\fP
section for more info.
.sp
Neubot is a background process. You can control it by using its
subcommands, its web interface or its web API. Neubot
listens for web requests at \fBhttp://127.0.0.1:9774/\fP. To access
the web interface, use your favorite browser.
To change the address and/or port where Neubot listens
for web requests, edit \fB/etc/neubot/api\fP (see the \fI\%FILES\fP
section).
.sp
Neubot runs with the privileges of the \fB_neubot\fP user,
or with the ones of the user indicated in the \fB/etc/neubot/users\fP
configuration file (see the \fI\%FILES\fP section).
.sp
The command line interface allows you to get the usage string
(\fBneubot \-\-help\fP), get the version number (\fBneubot \-V\fP), and
run a Neubot\(aqs subcommand (\fBneubot subcommand...\fP).
.SH IMPLEMENTED TESTS
.sp
All Neubot tests receive and send random data. Neubot does
not monitor the user\(aqs traffic.
.sp
Neubot implements three active network tests: \fBbittorrent\fP, \fBraw\fP and
\fBspeedtest\fP. For each test, there is a Neubot subcommand that allows
to run the test immediately. Moreover, Neubot schedules one of the
three tests at random every 23 \- 27 minutes.
.sp
The \fBbittorrent\fP test emulates BitTorrent peer\-wire protocol and
estimates the round\-trip time, the download and the upload goodput
(i.e. the application\-level speed measured at the receiver).
It uses the time that connect() takes to complete as an estimator of
the round\-trip time. It estimates the goodput by dividing the amount of
transferred bytes by the elapsed time. To avoid consuming too much
user resources, the \fBbittorrent\fP test adapts the number of bytes to
transfer such that the test runs for about five seconds.
.sp
The \fBraw\fP test performs a \fIraw\fP 10\-second TCP download to estimate
the download goodput. Also, it estimates the goodput from the
round\-trip time, and it collects statistics about the TCP sender
by using Web100 (see \fBhttp://www.web100.org\fP). In addition, it
estimates the round\-trip time in two ways: (1) by measuring the
time that connect() takes to complete (like \fBbittorrent\fP) and (2)
by measuring the average time elapsed between sending a small request
and receiving a small response.
.sp
The \fBspeedtest\fP test emulates HTTP and estimates the round\-trip
time, the download and the upload goodput. It estimates the round\-trip
time in two ways: (1) by measuring the time that connect() takes
to complete (like \fBbittorrent\fP) and (2) by measuring the average
time elapsed between sending a small request and receiving a small
response (like \fBraw\fP). It estimates the goodput by dividing the
amount of transferred bytes by the elapsed time. To avoid consuming
too much user resources, the \fBbittorrent\fP test adapts the number
of bytes to transfer such that the test runs for about five seconds.
.SH SUBCOMMANDS
.sp
This section documents Neubot\(aqs subcommands.
.INDENT 0.0
.TP
.B \fBneubot bittorrent [\-6fv] [\-A address] [\-p port]\fP
Asks Neubot to run a bittorrent test using the web API and fails
if Neubot is not running in the background.
.sp
Accepts the following options:
.INDENT 7.0
.TP
.B \-6
Prefer IPv6 to IPv4.
.TP
.BI \-A \ address
Address of the remote test server.
.TP
.B \-f
Force the test. Run the test in the local process context
(instead of using the web API) and override privacy
settings if needed. Useful for developers and for debugging.
.TP
.BI \-p \ port
Port of the remote test server.
.TP
.B \-v
Makes the command more verbose.
.UNINDENT
.TP
.B \fBneubot database [\-f database] [action]\fP
Performs the specified \fBaction\fP or prints the database\(aqs path
if no action is specified.  We do not recommended to use this
command to modify the database while Neubot is running, since
Neubot does not expect the database to change while it is
running, so it won\(aqt pick the changes up. This command requires
\fBroot\fP privileges to modify the database: if you are not
\fBroot\fP, the database is opened in readonly mode.
.sp
Accepts the following options:
.INDENT 7.0
.TP
.BI \-f \ database
Force file. Forces the command to use \fIdatabase\fP instead of the default
database path.
.UNINDENT
.sp
Implements the following actions:
.INDENT 7.0
.TP
.B delete_all
Deletes all the results in the database.
.TP
.B dump
Dumps to the standard ouput the content of the database in JSON format.
.TP
.B prune
Removes results older than one year.
.TP
.B regen_uuid
Generates a new random unique identifier (or UUID) for Neubot. (See
the \fI\%PRIVACY\fP section for more on the UUID).
.TP
.B show
Pretty prints to the standard ouput the content of the database
in JSON format.
.UNINDENT
.TP
.B \fBneubot privacy [\-Pt] [\-D setting=value] [\-f database]\fP
Manage privacy settings. When invoked without
options, this command prints the current privacy
settings values.
.sp
Accepts the following options:
.INDENT 7.0
.TP
.B \-D setting=value
Turn on (nonzero) and off (zero) the specified privacy
setting.
.sp
This command just modifies the database: you have to
restart Neubot to make changes effective. To modify privacy
settings when Neubot is running, we recommend to use the
web interface.
.sp
Privacy settings:
.INDENT 7.0
.TP
.B informed
The user has read the privacy policy.
.TP
.B can_collect
The user provides the permission to collect his/her IP
address for research purposes.
.TP
.B can_publish
The user provides the permission to publish his/her IP
address allowing anyone to reuse it for research purposes.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.BI \-f \ database
Force file. Forces the command to use database instead of the
default database path.
.TP
.B \-P
Prints privacy policy on the standard output.
.TP
.B \-t
Test.  Exits with success (exit value \fI0\fP) if all privacy
settings all nonzero.  Exits with failure (exit value
\fInonzero\fP) if at least one setting is zero.
.UNINDENT
.TP
.B \fBneubot raw [\-6fv] [\-A address] [\-p port]\fP
Asks Neubot to run a raw test using the web API and fails if
Neubot is not running in the background.
.sp
Accepts the following options:
.INDENT 7.0
.TP
.B \-6
Prefer IPv6 to IPv4.
.TP
.BI \-A \ address
Address of the remote test server.
.TP
.B \-f
Force the test. Run the test in the local process context
(instead of using the web API) and override privacy
settings if needed. Useful for developers and for debugging.
.TP
.BI \-p \ port
Port of the remote test server.
.TP
.B \-v
Makes the command more verbose.
.UNINDENT
.TP
.B \fBneubot speedtest [\-6fv] [\-A address] [\-p port]\fP
Asks Neubot to run a speedtest test using the web API and fails
if Neubot is not running in the background.
.sp
Accepts the following options:
.INDENT 7.0
.TP
.B \-6
Prefer IPv6 to IPv4.
.TP
.BI \-A \ address
Address of the remote test server.
.TP
.B \-f
Force the test. Run the test in the local process context
(instead of using the web API) and override privacy
settings if needed. Useful for developers and for debugging.
.TP
.BI \-p \ port
Port of the remote test server.
.TP
.B \-v
Makes the command more verbose.
.UNINDENT
.TP
.B \fBneubot start\fP
On MacOS this command runs launchctl(1), which in turn starts
Neubot. You must be \fBroot\fP to run this command.  On MacOS, Neubot\(aqs
installer configures the system to launch Neubot at startup; i.e.
you do not typically need to run this command.
.sp
(On MacOS, Neubot is implemented by two daemons: the usual unprivileged
daemon and a privileged daemon. The latter controls the former and
periodically forks an unprivileged child to check for updates.)
.sp
On MacOS, the start command accepts the following options:
.INDENT 7.0
.TP
.B \-a
Auto\-updates. When this flag is specified, the privileged
daemon periodically forks an unprivileged child to check
for updates.
.TP
.B \-d
Debug. When this flag is specified, Neubot runs in
the foreground.
.TP
.B \-v
Verbose. When this flag is specified, the start command
is verbose (i.e. it prints on the standard error
the commands it is about to invoke).
.sp
When both \-v and \-d are specified, Neubot runs in verbose mode
in the foreground.
.UNINDENT
.sp
At boot time, launchctl(1) starts Neubot with the \-a and \-d
command line options.
.sp
On other UNIX systems, the start command forks the Neubot daemon,
which drops \fBroot\fP privileges and runs in the background.  On such
systems, this command does not accept any command line option.
.TP
.B \fBneubot status\fP
This command asks the status of Neubot using the web API.  It
returns 0 if connect() succeeds and the response is OK, nonzero
otherwise.
.sp
On MacOS this command accepts the \fB\-v\fP option, which makes it
more verbose. On other UNIX systems, it does not accept any
command line option.
.TP
.B \fBneubot stop\fP
On MacOS, this command runs launchctl(1), which in turn stops
Neubot. You must be \fBroot\fP to run this command. On MacOS, this
command accepts the \fB\-v\fP option, which makes it more verbose.
.sp
On other UNIX systems, this command uses the web
API to request Neubot to exit.
.UNINDENT
.SH FILES
.sp
Assuming that Neubot is installed at \fB/usr/local\fP, this is the
list of the files installed.
.INDENT 0.0
.TP
.B \fB/etc/neubot/api\fP
Configuration file that indicates the endpoint where Neubot should
listen for web API requests. Example (which also shows the syntax
and indicates the default values):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
#
# /etc/neubot/api \- controls address, port where Neubot listens
# for incoming web API requests.
#
address 127.0.0.1  # Address where the listen
port 9774          # Port where to listen
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fB/etc/neubot/users\fP
Configuration file that indicates the unprivileged user names
that Neubot should use. Example (which also shows the syntax
and indicates the default values):
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
#
# /etc/neubot/users \- controls the unprivileged user names used
# by Neubot to perform various tasks.
#
update_user _neubot_update  # For auto\-updates (MacOS\-only)
unpriv_user _neubot         # For network tests
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fB/usr/local/bin/neubot\fP
The Neubot executable script.
.TP
.B \fB/usr/local/share/neubot/\fP
Location where Neubot Python modules are installed.
.TP
.B \fB/usr/local/share/neubot/www/\fP
Location where the web interface files are installed. The web interface
is described in the \fI\%WEB INTERFACE FILES\fP section.
.TP
.B \fB/var/lib/neubot/database.sqlite3\fP
System\-wide results database for Linux systems, created when
Neubot starts for the first time.
.TP
.B \fB/var/neubot/database.sqlite3\fP
System\-wide results database for non\-Linux systems,
created when Neubot starts for the first time.
.UNINDENT
.SH EXAMPLES
.sp
In this section, we represent the unprivileged user prompt with \fB$\fP
and the \fBroot\fP user prompt with \fB#\fP.
.sp
Run on\-demand bittorrent test:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ neubot bittorrent
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Run on\-demand raw test:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ neubot raw
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Run on\-demand speedtest test:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ neubot speedtest
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Start Neubot:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# neubot start
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Stop Neubot:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# neubot stop  # MacOS
$ neubot stop  # other UNIX
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Run Neubot in the foreground with verbose logging:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# neubot start \-dv                       # MacOS
$ neubot agent \-v \-D agent.daemonize=no  # other UNIX
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Export Neubot results to JSON:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# neubot database dump > output.json
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Read Neubot\(aqs privacy policy:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ neubot privacy \-P
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Run Neubot \fBcommand\fP from the sources directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ./UNIX/bin/neubot command
.ft P
.fi
.UNINDENT
.UNINDENT
.SH WEB INTERFACE FILES
.sp
Here we provide a brief description of the core files of the web
interface:
.INDENT 0.0
.TP
.B \fBcss/\fP
Directory that contains CSS files.
.TP
.B \fBfavicon.ico\fP
Neubot\(aqs favicon.
.TP
.B \fBfooter.html\fP
Common footer for all web pages (Neubot uses server\-side includes).
.TP
.B \fBheader.html\fP
Common header for all web pages (Neubot uses server\-side includes).
.TP
.B \fBimg/\fP
Directory that contains images.
.TP
.B \fBjs/\fP
Directory that contains javascript files. In addition to jQuery and
jqPlot, it contains the following scripts:
.INDENT 7.0
.TP
.B \fBjs/contrib.js\fP
Helper functions from many authors.
.TP
.B \fBjs/i18n.js\fP
Implementation of web user interface internationalization (aka i18n).
.TP
.B \fBjs/index.js\fP
Contains functions to retrieve and process the state of Neubot.
.TP
.B \fBjs/log.js\fP
Contains code to retrieve and process Neubot logs.
.TP
.B \fBjs/privacy.js\fP
Contains code to query and modify privacy settings.
.TP
.B \fBjs/results.js\fP
Contains code to process Neubot results, as well as code to display
them as plots and tables.
.TP
.B \fBjs/settings.js\fP
Contains code to retrieve and modify Neubot settings.
.TP
.B \fBjs/state.js\fP
Helper code for retrieving and processing Neubot state.
.TP
.B \fBjs/update.js\fP
Minimal script included by updater.html. It just sets the active
tab in the web interface.
.TP
.B \fBjs/utils.js\fP
Miscellaneous helper functions.
.UNINDENT
.TP
.B \fBlang/\fP
Directory that contains one javascript file for each language in which
the web interface is translated. Each of these javascripts contains
a dictionary, named \fBLANG\fP, that maps a string (or a key representing
a string) to its translation.
.sp
In javascript, you mark strings for translation by wrapping them
with \fBi18n.get()\fP calls. For example, to indicate that the string
"Disable automatic tests" should be translated, you should write:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
\&...
i18n.get("Disable automatic tests");
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In HTML code, you mark the content of an HTML tag for translation by adding
the tag to the \fBi18n\fP class. Differently from javascript, we don\(aqt map
the content of an HTML tag to its translation; instead, we map a key that
represents the HTML tag content to its translation. The key is another HTML
class, which must start with \fBi18n_\fP, as in the following example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
\&...
<p class="i18n i18n_foobar">Neubot web interface</p>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To translate the two examples above in, for example, Italian you
edit the \fBwww/lang/it.css\fP file and add:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
var LANG = {
    ...
    "Disable automatic tests": "Disabilita test automatici",
    "i18n_foobar": "Interfaccia web di Neubot",
    ...
};
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fBlog.html\fP
Shows Neubot logs.
.TP
.B \fBnot_running.html\fP
Page displayed when Neubot is not running.
.TP
.B \fBprivacy.html\fP
Shows, and allows to modify, privacy settings.
.TP
.B \fBresults.html\fP
The results page, dynamically filled by javascript using Neubot web
API. It allows you to see the results of recent experiments, both
in form of plots and tables.
.TP
.B \fBsettings.html\fP
Shows (and allows to modify) Neubot settings.
.TP
.B \fBtest/\fP
Directory that contains a \fBfoo.html\fP and a \fBfoo.json\fP file for
each test \fBfoo\fP. The list of available tests in \fBresults.html\fP is
automatically generated from the files in this directory.
.INDENT 7.0
.TP
.B \fBtest/foo.html\fP
Description of the \fBfoo\fP test. It is included into the
\fBresults.html\fP page when the test is selected.
.TP
.B \fBtest/foo.json\fP
Description of the plots and tables included into \fBresults.html\fP
when test \fBfoo\fP is selected. The format of the JSON is documented
into the \fI\%WEB API\fP section of this manual page.
.TP
.B \fBtest/foo.json.local\fP
When \fBfoo.json.local\fP exists, Neubot will use it (instead of
\fBfoo.json\fP) to prepare plots and tables in \fBresults.html\fP.
Allows the user to heavily customize the results page for test
\fBfoo\fP.
.UNINDENT
.TP
.B \fBupdate.html\fP
Page displayed on Windows when Neubot needs to be manually
updated. Now that automatic updates are implemented, it
should never pop up.
.UNINDENT
.SH WEB API
.sp
To access Neubot API, you send HTTP requests to the address and port
where Neubot is listening (which is \fB127.0.0.1:9774\fP by default, and
which can be changed by editing \fB/etc/neubot/api\fP).
.sp
Here is a detailed description of each API.
.INDENT 0.0
.TP
.B \fB/api\fP
This API is an alias for \fB/api/\fP.
.TP
.B \fB/api/\fP
This API allows you to get (\fBGET\fP) the list of available APIs,
encoded as a JSON.
.sp
Returned JSON example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
 [
  "/api",
  "/api/",
  "/api/config",
  "/api/data",
  "/api/debug",
  "/api/exit",
  "/api/index",
  "/api/log",
  "/api/results",
  "/api/runner",
  "/api/state",
  "/api/version"
]
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fB/api/config[?options]\fP
This API allows to you get (\fBGET\fP) and set (\fBPOST\fP) the variables
that modify the behavior of Neubot.
.sp
\fBGET\fP returns a dictionary, encoded using JSON, that maps each variable
to its value.  \fBPOST\fP sends a url\-encoded string, which contains one
or more \fBvariable=new_value\fP atoms separated by \fB&\fP.
.sp
The API accepts the following query\-string options:
.INDENT 7.0
.TP
.B \fBdebug=integer [default: 0]\fP
When nonzero, the API returns a pretty\-printed JSON. Otherwise, the
JSON is serialized on a single line.
.TP
.B \fBlabels=integer [default: 0]\fP
When nonzero, returns the description of the variables instead of their
values.
.UNINDENT
.sp
Returned JSON example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
{
 "enabled": 1,
 "negotiate.max_thresh": 64,
 "negotiate.min_thresh": 32,
 "negotiate.parallelism": 7,
 "privacy.can_collect": 1,
 "privacy.can_publish": 1,
 "privacy.can_informed": 1,
 ...
 "uuid": "0964312e\-f451\-4579\-9984\-3954dcfdeb42",
 "version": "4.2",
 "www.lang": "default"
}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
We have not standardized variable names yet. Therefore, we don\(aqt provide
here a list of variable names, types, and default values.
.TP
.B \fB/api/data?test=string[&options]\fP
This API allows you to retrieve (\fBGET\fP) the data collected during Neubot
tests.  As we have a single API for all tests, you must provide the test
name using the query string.
.sp
This API returns a JSON that serializes a list of dictionaries, in which
each dictionary is the data collected during a test. We dedicate a section
of the manual page to the structure returned by each test.
.sp
This API accepts the following query\-string parameters:
.INDENT 7.0
.TP
.B \fBdebug=integer [default: 0]\fP
When nonzero, the API returns a pretty\-printed JSON. Otherwise, the
JSON is serialized on a single line.
.TP
.B \fBsince=integer [default: 0]\fP
Returns only the data collected after the specified time (indicated
as the number of seconds elapsed since midnight of January,
1st 1970).
.TP
.B \fBtest=string\fP
This parameter is mandatory and specifies the test whose data you
want to retrieve.
.TP
.B \fBuntil=integer [default: 0]\fP
Returns only the data collected before the specified time (indicated
as the number of seconds elapsed since midnight of January,
1st 1970).
.UNINDENT
.TP
.B \fB/api/debug\fP
This API allows you to get (\fBGET\fP) text/plain information about Neubot
internals, which is typically useful for debugging purposes. As such,
the consistency of the output format is not guaranteed.
.sp
Returned text example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
{\(aqWWW\(aq: \(aq/usr/share/neubot/www\(aq,
 \(aqnotifier\(aq: {\(aq_subscribers\(aq: {},
           \(aq_timestamps\(aq: {\(aqstatechange\(aq: 1336727245277393,
                           \(aqtestdone\(aq: 1336727245277246}},
 \(aqqueue_history\(aq: [],
 \(aqtypestats\(aq: {\(aqABCMeta\(aq: 26,
               \(aqBackendNeubot\(aq: 1,
               \(aqBackendProxy\(aq: 1,
               ...
              }}
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fB/api/exit\fP
When this API is invoked, Neubot exits immediately (i.e. without
sending any response).
.sp
Don\(aqt use this API to shut down Neubot on MacOS, use the \fBneubot
stop\fP command instead. This API, in fact, has effect on the unprivileged
Neubot process only, and the privileged process will respawn the
unprivileged process once it notices it died.
.TP
.B \fB/api/index\fP
This API uses \fB302 Found\fP and \fBLocation\fP to redirect the
caller to either \fBindex.html\fP (if privacy settings are OK)
or on \fBprivacy.html\fP (if privacy settings are not OK).
.TP
.B \fB/api/log[?options]\fP
This API allows you to get (\fBGET\fP) Neubot logs, as a list of
dictionaries. Each dictionary represents a log record and contains
the following fields:
.INDENT 7.0
.TP
.B \fBtimestamp (integer)\fP
Time when this log was generated, expressed as number of seconds
elapsed since midnight of January, 1st 1970.
.TP
.B \fBseverity (string)\fP
The log message severity; one of: \fBDEBUG\fP, \fBINFO\fP, \fBWARNING\fP,
and \fBERROR\fP.
.TP
.B \fBmessage (string)\fP
The log message string.
.UNINDENT
.sp
This API accepts the following query\-string options:
.INDENT 7.0
.TP
.B \fBdebug (int) [default: 0]\fP
If nonzero, the API formats logs like they are printed on the
system logger (i.e. as a text/plain sequence of lines). Otherwise,
the API returns the JSON list of dictionaries described above.
.TP
.B \fBreversed (int) [default: 0]\fP
If nonzero logs are reversed (i.e. the most recent log record is
the first element of the list). Otherwise logs are returned in
natural order (the most recent log record is the last element of
the list).
.TP
.B \fBverbosity (int) [default: 1]\fP
When the verbosity is less than 1, only \fBERROR\fP and \fBWARNING\fP
messages are returned. When the verbosity is 1, the API returns
also \fBINFO\fP messages. When the verbosity is greater than 1,
the API returns also \fBINFO\fP and \fBDEBUG\fP messages.
.UNINDENT
.sp
Returned JSON example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
[
 {
  "message": "raw_negotiate: not reached final state",
  "severity": "WARNING",
  "timestamp": 1366195042
 },
 {
  "message": "raw_negotiate: bad response",
  "severity": "ERROR",
  "timestamp": 1366236483
 },
 {
  "message": "raw_negotiate: not reached final state",
  "severity": "WARNING",
  "timestamp": 1366236484
 }
]
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fB/api/results?test=string[&options]\fP
This API allows the web interface to get (\fBGET\fP) information on how to
format results. It returns a dictionary, encoded as JSON, that indicates
the plots and the tables to be generated in the \fBresults.html\fP page for the
\fIselected test\fP (which is either the test specified via query string or
the default test, speedtest, if none was specified).
.sp
The dictionary for test \fBfoo\fP is generated using \fBwww/test/foo.json\fP (or
\fBwww/test/foo.json.local\fP) as template and contains the following fields:
.INDENT 7.0
.TP
.B \fBavailable_tests (list of strings)\fP
List that contains the name of all the available tests.
.TP
.B \fBdescription (string)\fP
String that contains a long description of the selected test. This is
the content of \fBwww/test/foo.html\fP.
.TP
.B \fBplots (list of dictionaries)\fP
List of dictionaries. Each dictionary contains the instructions to
generate a plot:
.INDENT 7.0
.TP
.B \fBdatasets (list of dictionaries)\fP
List of dictionaries. Each dictionary contains the instructions to
plot one serie of data:
.INDENT 7.0
.TP
.B \fBlabel (string)\fP
Label to use in the legend.
.TP
.B \fBmarker (string)\fP
Indicates the marker to use, either \fBcircle\fP or \fBsquare\fP.
.TP
.B \fBrecipe (list)\fP
LISP\-like code that describes how to generate one point on the Y
axis from one row of the selected test\(aqs data. We describe this
lisp\-like language in the \fI\%DATA PROCESSING LANGUAGE\fP section of
this manual page.
.UNINDENT
.TP
.B \fBtitle (string)\fP
Title of the plot.
.TP
.B \fBxlabel (string)\fP
Label for the X axis.
.TP
.B \fBylabel (string)\fP
Label for the Y axis.
.UNINDENT
.TP
.B \fBselected_test\fP
The selected test name.
.TP
.B \fBtable (list of dictionaries)\fP
List of dictionaries. Each dictionary is one column of the table
to be added to \fBresults.html\fP:
.INDENT 7.0
.TP
.B \fBlabel (string)\fP
Label of the column header.
.TP
.B \fBrecipe (list)\fP
LISP\-like code that describes how to generate the value of the
current column in the table from one row of the selected test\(aqs
data. We describe this lisp\-like language in the \fI\%DATA PROCESSING
LANGUAGE\fP section of this manual page.
.UNINDENT
.TP
.B \fBtitle (string)\fP
The title of the test (e.g. \(aqBitTorrent test\(aq).
.TP
.B \fBwww_no_description (integer)\fP
Whether to include a description of the test in the results page (zero)
or not (nonzero).
.TP
.B \fBwww_no_legend (integer)\fP
Whether to include a legend in the plots (zero) or not (nonzero).
.TP
.B \fBwww_no_plot (integer)\fP
Whether to generate plots (zero) or not (nonzero).
.TP
.B \fBwww_no_split_by_ip (integer)\fP
Whether to split the selected test\(aqs data by IP and plot a different line
for each IP (zero) or not (nonzero).
.TP
.B \fBwww_no_table (integer)\fP
Whether to generate a table that contains the selected test\(aqs data (zero)
or not (nonzero).
.TP
.B \fBwww_no_title (integer)\fP
Whether to include the title of the test in the results page (zero)
or not (nonzero).
.UNINDENT
.sp
The API accepts the following query\-string options:
.INDENT 7.0
.TP
.B \fBdebug=integer [default: 0]\fP
When nonzero, the API returns a pretty\-printed JSON. Otherwise,
the JSON is serialized on a single line.
.TP
.B \fBtest=string\fP
This parameter is mandatory and specifies the selected test.
.UNINDENT
.sp
Returned JSON example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
{
 "available_tests": [
     "raw",
     "speedtest",
     "bittorrent"
 ],
 "description": "...",
 "www_no_split_by_ip": 0,
 "title": "Your recent Speedtest results",
 "www_no_legend": 0,
 "selected_test": "speedtest",
 "www_no_plot": 0,
 "www_no_table": 0,
 "table": [
     {
         "recipe": ["to\-datetime",
                     ["select", "timestamp", "result"]],
         "label": "Timestamp"
     },
     {
         "recipe": ["select", "internal_address", "result"],
         "label": "Internal address"
     },
     {
         "recipe": ["select", "real_address", "result"],
         "label": "Real address"
     },
     {
         "recipe": ["select", "remote_address", "result"],
         "label": "Remote address"
     },
     {
         "recipe": ["to\-millisecond\-string",
                     ["select", "connect_time", "result"]],
         "label": "Connect time"
     },
     {
         "recipe": ["to\-millisecond\-string",
                     ["select", "latency", "result"]],
         "label": "Appl. latency"
     },
     {
         "recipe": ["to\-speed\-string",
                     ["select", "download_speed", "result"]],
         "label": "Download speed"
     },
     {
         "recipe": ["to\-speed\-string",
                     ["select", "upload_speed", "result"]],
         "label": "Upload speed"
     }
 ],
 "www_no_description": 0,
 "plots": [
     {
         "datasets": [
             {
                 "marker": "circle",
                 "recipe": ["to\-speed",
                             ["select", "download_speed",
                              "result"]],
                 "label": "Dload"
             },
             {
                 "marker": "square",
                 "recipe": ["to\-speed",
                             ["select", "upload_speed",
                              "result"]],
                 "label": "Upload"
             }
         ],
         "ylabel": "Goodput (Mbit/s)",
         "xlabel": "Date",
         "title": "Download and upload speed"
     },
     {
         "datasets": [
             {
                 "marker": "circle",
                 "recipe": ["to\-millisecond",
                             ["select", "latency", "result"]],
                 "label": "Appl. latency"
             },
             {
                 "marker": "square",
                 "recipe": ["to\-millisecond",
                             ["select", "connect_time",
                              "result"]],
                 "label": "Connect time"
             }
         ],
         "ylabel": "Delay (ms)",
         "xlabel": "Date",
         "title": "Connect time and latency"
     }
 ],
 "www_no_title": 0
}
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fB/api/runner?test=string[&options]\fP
This API allows the caller to schedule a test for immediate
execution. If a test is already running the API returns an
error \fB500\fP, otherwise it returns \fB200\fP.
.sp
The API accepts the following query\-string options:
.INDENT 7.0
.TP
.B \fBtest=string\fP
This option is mandatory and indicates the name of the test
that Neubot should schedule for execution.
.TP
.B \fBstreaming=integer [default: 0]\fP
When nonzero, Neubot streams logs generated during the test in the
response body and closes the connection when the test is complete.
Otherwise, the response body is an empty dictionary.
.sp
When you invoke tests from the command line (e.g. \fBneubot
bittorrent\fP), \fIstreaming\fP is the feature that allows to print logs
generated by the test on the console.
.UNINDENT
.sp
Returned JSON example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
{}
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Returned text example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
1366299354 [INFO] runner_core: Need to auto\-discover first...
1366299355 [INFO] runner_mlabns: server discovery...
1366299356 [INFO] runner_mlabns: server discovery... done
1366299356 [INFO] raw_clnt: connection established with ...
1366299356 [INFO] raw_clnt: connect_time: 13.6 ms
1366299357 [INFO] raw_clnt: sending auth to server...
1366299357 [INFO] raw_clnt: sending auth to server... done
1366299357 [INFO] raw_clnt: receiving auth from server...
1366299357 [INFO] raw_clnt: receiving auth from server... done
1366299357 [INFO] raw_clnt: estimating ALRTT...
1366299357 [INFO] raw_clnt: alrtt_avg: 14.3 ms
1366299357 [INFO] raw_clnt: estimating ALRTT... done
1366299357 [INFO] raw_clnt: raw goodput test...
1366299367 [INFO] raw_clnt: raw goodput test... done
1366299367 [INFO] raw_clnt: goodput: 65.5 Mbit/s
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fB/api/state[?options]\fP
This API allows you to get (\fBGET\fP) and track (via comet) the state
of Neubot. The API returns a dictionary with the following fields:
.INDENT 7.0
.TP
.B \fBcurrent=string\fP
The name of the current state; one of: \fBidle\fP, \fBrendezvous\fP,
\fBnegotiate\fP, \fBtest\fP, and \fBcollect\fP.
.TP
.B \fBevents=dictionary\fP
A dictionary that maps the name of an event (a string) to the most
recent value related to such event (a string, an integer, a list,
or a dictionary).
.sp
While running, Neubot generates a limited set of events, which drive
the web interface. For example, the \fBtest_download\fP event value
is used to update the download speed in the right
sidebar of the web interface.
.sp
The list of generated events is not standardized yet, so we don\(aqt
provide it here.
.TP
.B \fBt=integer\fP
The identifier of the current event.
.UNINDENT
.sp
The API accepts the following query\-string options:
.INDENT 7.0
.TP
.B \fBdebug=integer [default: 0]\fP
When nonzero, the API returns a pretty\-printed JSON. Otherwise,
the JSON is serialized on a single line.
.TP
.B \fBt=integer\fP
When this option is present, Neubot does not return a response until
the next event after the one identified by \fBinteger\fP is fired (or
until a timeout expires). This behavior allows to implement the comet
pattern and to timely update the web interface with low overhead.
.UNINDENT
.TP
.B \fB/api/version\fP
This API allows you to get (\fBGET\fP) the version number of Neubot, in
\fBtext/plain\fP format.
.sp
Returned text example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
0.4.15.7
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SH BITTORRENT DATA FORMAT
.sp
We represent the data collected by the \fBbittorrent\fP test with a
dictionary that contains the following fields:
.INDENT 0.0
.TP
.B \fBconnect_time (float)\fP
RTT estimated by measuring the time that connect() takes
to complete, measured in seconds.
.TP
.B \fBdownload_speed (float)\fP
Download speed measured by dividing the number of received bytes by
the elapsed download time, measured in bytes per second.
.TP
.B \fBinternal_address (string)\fP
Neubot\(aqs IP address, as seen by Neubot. It is typically either
an IPv4 or an IPv6 address.
.TP
.B \fBneubot_version (string)\fP
Neubot version number, encoded as a floating point number and
printed into a string. Given a version number in the format
\fB<major>.<minor>.<patch>.<revision>\fP, the encoding is as follows:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<major> + 1e\-03 * <minor> + 1e\-06 * <patch>
        + 1e\-09 * <revision>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For example, the \fB0.4.15.3\fP version number
is encoded as \fB0.004015003\fP.
.TP
.B \fBplatform (string)\fP
The operating system platform, e.g. \fBlinux2\fP, \fBwin32\fP.
.TP
.B \fBprivacy_can_collect (integer)\fP
The value of the \fBcan_collect\fP privacy setting.
.TP
.B \fBprivacy_can_publish (integer)\fP
The value of the \fBcan_publish\fP privacy setting.
.TP
.B \fBprivacy_informed (integer)\fP
The value of the \fBinformed\fP privacy setting.
.TP
.B \fBreal_address (string)\fP
Neubot\(aqs IP address, as seen by the server. It is typically either
an IPv4 or an IPv6 address.
.TP
.B \fBremote_address (string)\fP
The server\(aqs IP address. It is typically either an IPv4 or an
IPv6 address.
.TP
.B \fBtimestamp (integer)\fP
Time when the test was performed, expressed as number of seconds
elapsed since midnight of January, 1st 1970.
.TP
.B \fBupload_speed (float)\fP
Upload speed measured by dividing the number of sent bytes by the
elapsed upload time, measured in bytes per second.
.TP
.B \fBuuid (string)\fP
Random unique identifier of the Neubot instance, useful to perform
time series analysis.
.UNINDENT
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
 {
  "connect_time": 0.003387928009033203,
  "download_speed": 4242563.145733707,
  "internal_address": "130.192.91.231",
  "neubot_version": "0.004015007",
  "platform": "linux2",
  "privacy_can_collect": 1,
  "privacy_can_publish": 1,
  "privacy_informed": 1,
  "real_address": "130.192.91.231",
  "remote_address": "194.116.85.224",
  "test_version": 1,
  "timestamp": 1366045628,
  "upload_speed": 4231443.875881268,
  "uuid": "7528d674\-25f0\-4ac4\-aff6\-46f446034d81"
 },
 ...
.ft P
.fi
.UNINDENT
.UNINDENT
.SH RAW TEST DATA FORMAT
.sp
We represent the data collected by the \fBraw\fP test with a
dictionary that contains the following fields:
.INDENT 0.0
.TP
.B \fBconnect_time (float)\fP
RTT estimated by measuring the time that connect() takes
to complete, measured in seconds.
.TP
.B \fBdownload_speed (float)\fP
Download speed measured by dividing the number of received bytes by
the elapsed download time, measured in bytes per second.
.TP
.B \fBjson_data (string)\fP
This string contains the serialization of a JSON object, which
contains all the data collected during the test, both on the server
and on the client side. The dictionary that we are describing, in
fact, contains just a subset of the collected results. We can
not store the full JSON object directly until Neubot\(aqs \fBdatabase\fP
module and web interface are ready to process it.
.TP
.B \fBinternal_address (string)\fP
Neubot\(aqs IP address, as seen by Neubot. It is typically either
an IPv4 or an IPv6 address.
.TP
.B \fBlatency (float)\fP
RTT estimated by measuring the average time elapsed between sending
a small request and receiving a small response, measured in seconds.
.TP
.B \fBneubot_version (float)\fP
Neubot version number, encoded as a floating point number and printed
into a string. Given a version number in the format
\fB<major>.<minor>.<patch>.<revision>\fP, the encoding is as follows:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<major> + 1e\-03 * <minor> + 1e\-06 * <patch>
        + 1e\-09 * <revision>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For example, the \fB0.4.15.3\fP version number
is encoded as \fB0.004015003\fP.
.TP
.B \fBplatform (string)\fP
The operating system platform, e.g. \fBlinux2\fP, \fBwin32\fP.
.TP
.B \fBreal_address (string)\fP
Neubot\(aqs IP address, as seen by the server. It is typically either
an IPv4 or an IPv6 address.
.TP
.B \fBremote_address (string)\fP
The server\(aqs IP address. It is typically either an IPv4 or an
IPv6 address.
.TP
.B \fBtimestamp (integer)\fP
Time when the test was performed, expressed as number of seconds
elapsed since midnight of January, 1st 1970.
.TP
.B \fBuuid (string)\fP
Random unique identifier of the Neubot instance, useful to perform
time series analysis.
.UNINDENT
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
 {
  "connect_time": 0.2981860637664795,
  "download_speed": 3607.120929707688,
  "internal_address": "130.192.91.231",
  "json_data": "...",
  "latency": 0.29875500202178956,
  "neubot_version": "0.004015007",
  "platform": "linux2",
  "real_address": "130.192.91.231",
  "remote_address": "203.178.130.237",
  "timestamp": 1365071100,
  "uuid": "7528d674\-25f0\-4ac4\-aff6\-46f446034d81"
 },
 ...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Once unserialized, the JSON object saved into the \fBjson_data\fP field
of the \fBraw\fP dictionary (henceforth, \(aqouter dictionary\(aq) is a
dictionary that contains the following fields:
.INDENT 0.0
.TP
.B \fBclient (dictionary)\fP
A dictionary that contains data collected on the client side.
.TP
.B \fBserver (dictionary)\fP
A dictionary that contains data collected on the server side.
.UNINDENT
.sp
The client dictionary contains the following fields:
.INDENT 0.0
.TP
.B \fBal_capacity (float)\fP
Median bottleneck capacity computed at application level (experimental).
.TP
.B \fBal_mss (float)\fP
MSS according to the application level (information gathered
using setsockopt(2)).
.TP
.B \fBal_rexmits (list)\fP
Likely retransmission events computed at application level (experimental).
.TP
.B \fBalrtt_avg (float)\fP
Same as \fBlatency\fP in the outer dictionary.
.TP
.B \fBalrtt_list (list of tuples)\fP
List of RTT samples estimated by measuring the average time elapsed
between sending a small request and receiving a small response,
measured in seconds.
.TP
.B \fBconnect_time (float)\fP
Same as \fBconnect_time\fP in the outer dictionary.
.TP
.B \fBgoodput (dictionary)\fP
The dictionary contains the following fields:
.INDENT 7.0
.TP
.B \fBbytesdiff\fP
Total number of received bytes.
.TP
.B \fBticks (float)\fP
Timestamp when this piece of data was collected, expressed as number of
seconds elapsed since midnight of January, 1st 1970.
.TP
.B \fBtimediff (float)\fP
Total download time.
.UNINDENT
.TP
.B \fBgoodput_snap (list of dictionaries)\fP
List that contains a dictionary, which is updated roughly every
second during the download, and which contains the following fields:
.INDENT 7.0
.TP
.B \fBticks (float)\fP
Time when the current dictionary was saved, expressed as number
of seconds since midnight of January, 1st 1970.
.TP
.B \fBbytesdiff (integer)\fP
Number of bytes received since stats were previously saved.
.TP
.B \fBtimediff (float)\fP
Number of seconds elapsed since stats were previously saved.
.TP
.B \fButimediff (float)\fP
Difference between current \fBtms_utime\fP field of the \fBtms\fP
struct modified by \fBtimes(3)\fP and the previous value of
the same field.
.TP
.B \fBstimediff (float)\fP
Difference between current \fBtms_stime\fP field of the \fBtms\fP
struct modified by \fBtimes(3)\fP and the previous value of
the same field.
.UNINDENT
.TP
.B \fBmyname (string)\fP
Neubot\(aqs address (according to the server). This is same as
\fBreal_address\fP in the outer dictionary.
.TP
.B \fBpeername (string)\fP
Servers\(aqs address. This is same as \fBserver_address\fP in the outer
dictionary.
.TP
.B \fBplatform (string)\fP
Same as \fBplatform\fP in the outer dictionary.
.TP
.B \fBuuid (string)\fP
Same as \fBuuid\fP in the outer dictionary.
.TP
.B \fBversion (string)\fP
Same as \fBneubot_version\fP in the outer dictionary.
.UNINDENT
.sp
The server dictionary contains the following fields:
.INDENT 0.0
.TP
.B \fBgoodput (dictionary)\fP
The dictionary contains the following fields:
.INDENT 7.0
.TP
.B \fBbytesdiff\fP
Total number of sent bytes.
.TP
.B \fBticks (float)\fP
Timestamp when this piece of data was collected, expressed as number of
seconds elapsed since midnight of January, 1st 1970.
.TP
.B \fBtimediff (float)\fP
Total upload time.
.UNINDENT
.TP
.B \fBgoodput_snap (list of dictionaries)\fP
List that contains a dictionary, which is updated roughly every
second during the upload, and which contains the following fields:
.INDENT 7.0
.TP
.B \fBticks (float)\fP
Time when the current dictionary was saved, expressed as number
of seconds since midnight of January, 1st 1970.
.TP
.B \fBbytesdiff (integer)\fP
Number of bytes sent since stats were previously saved.
.TP
.B \fBtimediff (float)\fP
Number of seconds elapsed since stats were previously saved.
.TP
.B \fButimediff (float)\fP
Difference between current \fBtms_utime\fP field of the \fBtms\fP
struct modified by \fBtimes(3)\fP and the previous value of
the same field.
.TP
.B \fBstimediff (float)\fP
Difference between current \fBtms_stime\fP field of the \fBtms\fP
struct modified by \fBtimes(3)\fP and the previous value of
the same field.
.UNINDENT
.TP
.B \fBmyname (string)\fP
Servers\(aqs address. This is same as \fBserver_address\fP in the outer
dictionary.
.TP
.B \fBpeername (string)\fP
Neubot\(aqs address (according to the server). This is same as
\fBreal_address\fP in the outer dictionary.
.TP
.B \fBplatform (string)\fP
Same as \fBplatform\fP in the outer dictionary.
.TP
.B \fBtimestamp (integer)\fP
Time when the server dictionary was created, expressed as number of
seconds elapsed since midnight of January, 1st 1970.
.TP
.B \fBversion (string)\fP
Same as \fBneubot_version\fP in the outer dictionary.
.TP
.B \fBweb100_snap (list)\fP
A list that contains dictionaries. Each dictionary is a snapshot
of the Web100 TCP state. We take one Web100 snapshot every second
during the upload.
.sp
On the client side, this field is empty. We are working to identify
the most interesting fields that is interesting to save.
.UNINDENT
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
 {
  "client": {
   "al_mss": 1448,
   "uuid": "7528d674\-25f0\-4ac4\-aff6\-46f446034d81",
   "goodput": {
    "bytesdiff": 128200,
    "timediff": 35.540810108184814,
    "ticks": 1365071098.203412
   },
   "al_rexmits": [],
   "connect_time": 0.2981860637664795,
   "alrtt_list": [
    0.31011295318603516,
    0.30966901779174805,
    0.29677391052246094,
    0.2957899570465088,
    0.29570794105529785,
    0.2956199645996094,
    0.29558706283569336,
    0.2956211566925049,
    0.2958400249481201,
    0.296828031539917
   ],
   "myname": "130.192.91.231",
   "peername": "203.178.130.237",
   "platform": "linux2",
   "version": "0.004015007",
   "al_capacity": 10982553.692585895,
   "alrtt_avg": 0.29875500202178956,
   "goodput_snap": [
    {
     "bytesdiff": 24616,
     "timediff": 1.0001380443572998,
     "ticks": 1365071063.66274,
     "stimediff": 0.0,
     "utimediff": 0.0
    },
    ...
   ]
  },
  "server": {
   "timestamp": 1365070933,
   "myname": "203.178.130.237",
   "peername": "130.192.91.231",
   "platform": "linux2",
   "version": "0.004015007",
   "goodput": {
    "bytesdiff": 131092,
    "timediff": 34.94503116607666,
    "ticks": 1365070933.95337
   },
   "goodput_snap": [
    {
     "bytesdiff": 31856,
     "timediff": 1.0005459785461426,
     "ticks": 1365070900.008885,
     "stimediff": 0.0,
     "utimediff": 0.0
    },
    ...
   ],
   "web100_snap": []
  }
 }
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SPEEDTEST DATA FORMAT
.sp
We represent the data collected by the \fBspeedtest\fP test with a
dictionary that contains the following fields:
.INDENT 0.0
.TP
.B \fBconnect_time (float)\fP
RTT estimated by measuring the time that connect() takes
to complete, measured in seconds.
.TP
.B \fBdownload_speed (float)\fP
Download speed measured by dividing the number of received bytes by
the elapsed download time, measured in bytes per second.
.TP
.B \fBinternal_address (string)\fP
Neubot\(aqs IP address, as seen by Neubot. It is typically either
an IPv4 or an IPv6 address.
.TP
.B \fBlatency (float)\fP
RTT estimated by measuring the average time elapsed between sending
a small request and receiving a small response, measured in seconds.
.TP
.B \fBneubot_version (string)\fP
Neubot version number, encoded as a floating point number and printed
into a string. Given a version number in the format
\fB<major>.<minor>.<patch>.<revision>\fP, the encoding is as follows:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<major> + 1e\-03 * <minor> + 1e\-06 * <patch>
        + 1e\-09 * <revision>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For example, the \fB0.4.15.3\fP version number
is encoded as \fB0.004015003\fP.
.TP
.B \fBplatform (string)\fP
The operating system platform, e.g. \fBlinux2\fP, \fBwin32\fP.
.TP
.B \fBprivacy_can_collect (integer)\fP
The value of the \fBcan_collect\fP privacy setting.
.TP
.B \fBprivacy_can_publish (integer)\fP
The value of the \fBcan_publish\fP privacy setting.
.TP
.B \fBprivacy_informed (integer)\fP
The value of the \fBinformed\fP privacy setting.
.TP
.B \fBreal_address (string)\fP
Neubot\(aqs IP address, as seen by the server. It is typically either
an IPv4 or an IPv6 address.
.TP
.B \fBremote_address (string)\fP
The server\(aqs IP address. It is typically either an IPv4 or an
IPv6 address.
.TP
.B \fBtimestamp (integer)\fP
Time when the test was performed, expressed as number of seconds
elapsed since midnight of January, 1st 1970.
.TP
.B \fBupload_speed (float)\fP
Upload speed measured by dividing the number of sent bytes by the
elapsed upload time, measured in bytes per second.
.TP
.B \fBuuid (string)\fP
Random unique identifier of the Neubot instance, useful to perform
time series analysis.
.UNINDENT
.sp
Example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[
 {
  "connect_time": 0.0017991065979003906,
  "download_speed": 11626941.501993284,
  "internal_address": "130.192.91.231",
  "latency": 0.003973397341641513,
  "neubot_version": "0.004015007",
  "platform": "linux2",
  "privacy_can_collect": 1,
  "privacy_can_publish": 1,
  "privacy_informed": 1,
  "real_address": "130.192.91.231",
  "remote_address": "194.116.85.237",
  "test_version": 1,
  "timestamp": 1365074302,
  "upload_speed": 10974865.674026133,
  "uuid": "7528d674\-25f0\-4ac4\-aff6\-46f446034d81"
 },
 ...
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DATA PROCESSING LANGUAGE
.sp
The data processing language is a simple LISP\-like language. As such,
it describes processes whose goal is to transform pieces of collected data
by using lists.
.sp
Differently from traditional LISP syntax, however, the data processing
language is encoded using JSON.
.sp
The language implements the following operations:
.INDENT 0.0
.TP
.B \fB["divide", atom\-or\-list, atom\-or\-list]\fP
Divides the left atom (or list) by the right atom (or list) and
returns the result.
.TP
.B \fB["map\-select", atom, list]\fP
Cycles over the list and, for each element, it selects the
field indicated by the atom.
.TP
.B \fB["parse\-json", atom\-or\-list]\fP
Parses the value of the atom (or list) into an object.
.TP
.B \fB["reduce\-avg", list]\fP
Computes the average value of the list.
.TP
.B \fB["select", atom, object]\fP
Selects the element of object indicated by atom.
.TP
.B \fB["to\-datetime", atom\-or\-list]\fP
Converts atom (or list) to datetime string.
.TP
.B \fB["to\-millisecond", atom\-or\-list]\fP
Converts atom (or list) to millisecond.
.TP
.B \fB["to\-millisecond\-string", atom\-or\-list]\fP
Converts atom (or list) to millisecond string.
.TP
.B \fB["to\-speed", atom\-or\-list]\fP
Converts atom (or list) to speed (in bits per second).
.TP
.B \fB["to\-speed\-string", atom\-or\-list]\fP
Converts atom (or list) to speed string (in bits per second).
.TP
.B \fB"result"\fP
The current piece of data we are processing.
.UNINDENT
.sp
Example (select the \fBjson_data\fP field of the result, convert it to json,
take the \fBclient\fP field, take and compute the average of the \fBalrtt_list\fP
field, convert the result to millisecond):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
["to\-millisecond",
  ["reduce\-avg",
    ["select", "alrtt_list",
      ["select", "client",
        ["parse\-json",
          ["select", "json_data", "result"]]]]]]
.ft P
.fi
.UNINDENT
.UNINDENT
.SH PRIVACY
.sp
Neubot collects your IP address, which is personal data according to
European privacy laws. For this reason, Neubot needs to obtain your
permission to collect your IP address for research purposes, as well
as to publish it on the web for the same purpose. In addition, it
also needs that you assert that you have read the privacy policy.
.sp
Without the assertion that you have read the privacy policy and the
permission to collect and publish your IP address, Neubot can not
perform automatic (or manual) tests.
.sp
You can read Neubot\(aqs privacy policy by running the \fBneubot privacy \-P\fP
command. The privacy policy is also available at:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
http://127.0.0.1:9774/privacy.html
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Of course, if you modified the address and/or port where Neubot listens,
you need to update the URI accordingly.
.sp
In addition to the above, each Neubot is identified by a random
unique identifier (UUID) that is used to perform time series
analysis. We believe that this identifier does not brach your
privacy: in the worst case, we would be able to say that a given
Neubot has changed Internet address (anche, hence, ISP and/or
location). To regenerate your unique identifier, you can run
the \fBneubot database regen_uuid\fP command.
.SH AUTHOR
.sp
Neubot authors are:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Simone Basso                  <bassosimone@gmail.com>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following people have contributed patches to the project:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Alessio Palmero Aprosio       <alessio@apnetwork.it>
Antonio Servetti              <antonio.servetti@polito.it>
Roberto D\(aqAuria               <everlastingfire@autistici.org>
Marco Scopesi                 <marco.scopesi@gmail.com>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The following people have helped with internationalization:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Claudio Artusio               <claudioartusio@gmail.com>
.ft P
.fi
.UNINDENT
.UNINDENT
.SH COPYRIGHT
.sp
Neubot as a collection is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Copyright (c) 2010\-2013 Nexa Center for Internet & Society,
    Politecnico di Torino (DAUIN)

Neubot is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation, either version
3 of the License, or (at your option) any later version.
.ft P
.fi
.UNINDENT
.UNINDENT
.SH SEE ALSO
.INDENT 0.0
.IP \(bu 2
\fI\%http://www.neubot.org/\fP
.IP \(bu 2
\fI\%http://github.com/neubot/neubot\fP
.IP \(bu 2
\fI\%http://twitter.com/neubot\fP
.UNINDENT
.\" Generated by docutils manpage writer.
.
